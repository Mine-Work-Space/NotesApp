@page "/"
@inject INoteRepository NoteRepository
@inject IMapper Mapper;
@inject SweetAlertService Swal;

<PageTitle>Notes</PageTitle>
@* Top navigation *@
<SearchNoteByText OnNotesUpdateBySearchedParameters="NotesUpdateBySearchedParameters" NoteCount="NoteCount"/>
<div class="mt-5">
	@* Loading notes skeletons. *@
	@if (Data.Notes == null)
	{
		@for (int i = 0; i < 5; i++)
		{
			<div class="my-card d-flex flex-column" aria-hidden="true">
			<div class="note-title mt-2 ms-3">
				<h3>
					<span class="placeholder col-3"></span>	
				</h3>
			</div>
			<div class="note-text p-3 text-justify text-break">
				<p class="placeholder-glow">
					<span class="placeholder col-4"></span> 				
					<span class="placeholder col-7"></span>
					<span class="placeholder col-3"></span>
					<span class="placeholder col-6"></span>
					<span class="placeholder col-2"></span>
				</p>
			</div>
			<div class="mt-auto">
				<hr />
				<div class="note-footer">
					<ul>
						<li class="published-date placeholder-glow">
							<span class="placeholder col-6"></span>
							<span class="placeholder col-5"></span>
						</li>
						<li class="view">
							<button class="btn purple-btn align-items-center space-between disabled placeholder col-11">
								<span class="ms-3 my-text "></span>
							</button>
						</li>
						<li class="edit">
							<button class="btn btn-warning align-items-center space-between disabled placeholder col-11">
								<span class="ms-3 my-text "></span>
							</button>
						</li>
					</ul>
				</div>
			</div>
		</div>
		}
	}
	@* No data, empty note list. *@
	else if (Data.Notes.Count == 0)
	{
		<br />
		<div class="my-card d-flex flex-column">
			<div class="note-title mt-2 ms-3">
				<h3>Hmmm, no data to display...</h3>
			</div>
			<div class="note-text p-3 text-justify text-break">
				<p>
					@if (!string.IsNullOrEmpty(searchTermText))
					{
						<span>Any notes were found... Maybe try to search with the part of word. </span>
					}
					else
					{
						<span>But... you can try adding your note and sharing it with all users!</span>
					}
				</p>
			</div>
			<div class="mt-auto">
				<hr />
				<div class="note-footer">
				</div>
			</div>
		</div>
	}
	@* Displaying list *@
	else
	{
		@foreach (var note in Data.Notes)
		{
			<div class="my-card d-flex flex-column">
				<div class="note-title mt-2 ms-3">
					<h3>
						@((MarkupString)TextEditor.HighlightKeyWords(note.Title, searchTermText))
					</h3>
				</div>
				<div class="note-text p-3 text-justify text-break">
					@if (!note.IsEditing)
					{
						<p>
							@if (!string.IsNullOrEmpty(note.TextMinimized))
							{
								@((MarkupString)TextEditor.HighlightKeyWords(note.TextMinimized, searchTermText))
								<span>.....</span>
							}
							else
							{
								@((MarkupString)TextEditor.HighlightKeyWords(note.Text, searchTermText))
							}
						</p>
					}
					else
					{
						<textarea class="form-control" id="Text" rows="8" @bind="@note.EditableText" maxlength="8192"></textarea>
					}
				</div>
				<div class="mt-auto">
					<hr/>
					<div class="note-footer">
						<ul>
							<li class="published-date">
								<span> @(today.DayNumber - note.CreationDate.DayNumber) &nbsp;</span>
								@if ((today.DayNumber - note.CreationDate.DayNumber) > 1)
								{
									<span>days ago</span>
								}
								else
								{
									<span>day ago</span>
								}
							</li>
							<li class="view">
								@if(string.IsNullOrEmpty(note.TextMinimized))
								{
									<button class="btn purple-btn d-inline-flex align-items-center disabled">
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20"><path d="M1.18164 12C2.12215 6.87976 6.60812 3 12.0003 3C17.3924 3 21.8784 6.87976 22.8189 12C21.8784 17.1202 17.3924 21 12.0003 21C6.60812 21 2.12215 17.1202 1.18164 12ZM12.0003 17C14.7617 17 17.0003 14.7614 17.0003 12C17.0003 9.23858 14.7617 7 12.0003 7C9.23884 7 7.00026 9.23858 7.00026 12C7.00026 14.7614 9.23884 17 12.0003 17ZM12.0003 15C10.3434 15 9.00026 13.6569 9.00026 12C9.00026 10.3431 10.3434 9 12.0003 9C13.6571 9 15.0003 10.3431 15.0003 12C15.0003 13.6569 13.6571 15 12.0003 15Z"></path></svg>
										<span class="ms-3 my-text">View</span>
									</button>
								}
								else
								{
									<button class="btn purple-btn d-inline-flex align-items-center" @onclick="(() => ShowFullTextNote(note))" data-bs-toggle="modal" data-bs-target="#fullTextModal"
											data-container="body" data-toggle="popover" data-placement="top" data-content="Full text.">
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20"><path d="M1.18164 12C2.12215 6.87976 6.60812 3 12.0003 3C17.3924 3 21.8784 6.87976 22.8189 12C21.8784 17.1202 17.3924 21 12.0003 21C6.60812 21 2.12215 17.1202 1.18164 12ZM12.0003 17C14.7617 17 17.0003 14.7614 17.0003 12C17.0003 9.23858 14.7617 7 12.0003 7C9.23884 7 7.00026 9.23858 7.00026 12C7.00026 14.7614 9.23884 17 12.0003 17ZM12.0003 15C10.3434 15 9.00026 13.6569 9.00026 12C9.00026 10.3431 10.3434 9 12.0003 9C13.6571 9 15.0003 10.3431 15.0003 12C15.0003 13.6569 13.6571 15 12.0003 15Z"></path></svg>
										<span class="ms-3 my-text">View</span>
									</button>
								}
							</li>
							<li class="edit">
								<button class="btn btn-warning d-inline-flex align-items-center space-between" @onclick="(() => ToggleEditMode(note))">
									<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20"><path d="M21 15.2426V21.0082C21 21.556 20.5551 22 20.0066 22H3.9934C3.44476 22 3 21.5511 3 20.9925V9H9C9.55228 9 10 8.55228 10 8V2H20.0017C20.5531 2 21 2.45531 21 2.9918V6.75736L12.0012 15.7562L11.995 19.995L16.2414 20.0012L21 15.2426ZM21.7782 8.80761L23.1924 10.2218L15.4142 18L13.9979 17.9979L14 16.5858L21.7782 8.80761ZM3 7L8 2.00318V7H3Z" fill="rgba(44,44,1,1)"></path></svg>
									<span class="ms-3 my-text">@(note.IsEditing ? "Update" : "Edit")</span>
								</button>
							</li>
						</ul>
					</div>
				</div>
			</div>
		}	
		@* If user is searching notes by searchTerm, pagination not avaible *@
		@if(Data.DisplayType == DisplayType.Default)
		{
			<nav aria-label="pagination">
				<ul class="pagination justify-content-center flex-wrap">
					@if (Data.CurrentPage > 1)
					{
						<li class="page-item">
							<input type="button" class="page-link" value="Previous" @onclick="(async () => await LoadNotesByPageAsync(Data.CurrentPage - 1))" />
						</li>
					}
					else
					{
						<li class="page-item disabled"><input type="button" class="page-link" value="Previous" /></li>
					}
					@for (var pageNumber = 1; pageNumber < Data.Pages + 1; pageNumber++)
					{
						var page = pageNumber;
						<li class="page-item"><input type="button" class="page-link" @onclick="(async () => await LoadNotesByPageAsync(page))" value="@(page)" /></li>
					}
					@if(Data.CurrentPage < Data.Pages)
					{
						<li class="page-item">
							<input type="button" class="page-link" value="Next" @onclick="(async () => await LoadNotesByPageAsync(Data.CurrentPage + 1))" />
						</li>
					}
					else
					{
						<li class="page-item disabled"><input type="button" class="page-link" value="Next" /></li>
					}
				</ul>
			</nav>
		}
		<div class="spinner-border my-spinner text-light position-absolute top-50 start-50" style="visibility: @(isSearching ? "visible" : "hidden");" role="status"></div>
	}
	<AddNote OnNotesUpdateWithAddedNote="NotesUpdateWithAddedNote" />
	@* Add note button *@
	<div class="fixed-bottom d-flex justify-content-end m-5">
		<button class="btn add-button btn-success d-inline-flex align-items-center p-3" data-bs-toggle="modal" data-bs-target="#addNoteModal"
		data-container="body" data-toggle="popover" data-placement="top" data-content="Add new note.">
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="30" height="30"><path d="M11 11V5H13V11H19V13H13V19H11V13H5V11H11Z" fill="rgba(255,255,255,1)"></path></svg>
		</button>
	</div>
	@* Details modal *@
	<div class="modal fade" id="fullTextModal" tabindex="-1" aria-labelledby="fullTextLabel" aria-hidden="true">
		<div class="modal-dialog modal-lg">
			<div class="modal-content p-5 details-modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="fullTextLabel">@selectedNoteData.Item1</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<p>@selectedNoteData.Item2</p>
			</div>
		</div>
	</div>
</div>

@code {
	NotesList Data = new NotesList();
	// For displaying how many days passed from moment note was added
	DateOnly today = DateOnly.FromDateTime(DateTime.Now);
	// User-friendly loading circle when user trying to find note
	private bool isSearching = false;
	// Words to find
	string searchTermText = string.Empty;
	public int NoteCount = 0;
	// For displaying details data in #fullTextModal 
	(string title, string fullText) selectedNoteData;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if(firstRender)
		{
			await LoadNotesByPageAsync(page: 1);
			NoteCount = NoteRepository.NoteCount;
		}
	}
	// Method to show editable text in <textarea> from selected note 
	private async void ToggleEditMode(NoteUI note)
	{
		note.IsEditing = !note.IsEditing;
		if(note.IsEditing) {
			// Giving a value to the EditableText field of default Text field
			note.EditableText = note.Text;
		}

		if(note.EditableText != note.Text && note.EditableText.Length > 5)
		{
			bool success = await NoteRepository.UpdateNoteAsync(Mapper.Map<Note>(note));
			if(success)
			{
				note.Text = note.EditableText;
				await InvokeAsync(StateHasChanged);
				await Swal.FireAsync($"{note.Title} updated!");
			}
			else
			{
				await Swal.FireAsync("Oops", "Something went wrong..", SweetAlertIcon.Error);
			}
		}
	}
	// Set values to selectedNoteData and show details in modal #fullTextModal
	private void ShowFullTextNote(NoteUI note)
	{
		note.Deconstruct(out selectedNoteData.title, out selectedNoteData.fullText);
	}
	// Updating the list of notes by the searched word
	public async void NotesUpdateBySearchedParameters(string searchTerm)
	{
		isSearching = true;
		searchTermText = searchTerm;
		if (!string.IsNullOrEmpty(searchTerm))
			Data = await NoteRepository.GetNotesBySearchTermAsync(searchTerm);
		else
			Data = await NoteRepository.GetNotesByPageAsync(1);
		NoteCount = NoteRepository.NoteCount;
		isSearching = false;
		await InvokeAsync(StateHasChanged);
	}
	// Allows not to completely update the list of notes
	// Shows the user that a note has been added
	public async void NotesUpdateWithAddedNote(Note addedNote)
	{
		if(Data.Notes == null)
			Data.Notes = new List<NoteUI>();

		Data.Notes.Add(Mapper.Map<NoteUI>(addedNote));
		await InvokeAsync(StateHasChanged);
	}
	// Update notes list if page was changed
	private async Task LoadNotesByPageAsync(int page)
	{
		if (page != Data.CurrentPage)
		{
			Data = await NoteRepository.GetNotesByPageAsync(page, 5);
			NoteCount = NoteRepository.NoteCount;
			await InvokeAsync(StateHasChanged);
		}
	}
}