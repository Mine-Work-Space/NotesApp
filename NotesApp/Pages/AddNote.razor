@using NotesApp.Models;
@using NotesApp.Repositories.Interfaces;
@inject SweetAlertService Swal;
@inject INoteRepository noteRepository;

<div class="modal fade" id="addNoteModal" tabindex="-1" aria-labelledby="addNoteLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addNoteLabel">Add new note</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <EditForm Model="Note" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="titleSpan">Title</span>
                        </div>
                        <InputText type="text" class="form-control" id="title" @bind-Value="Note.Title"></InputText>
                    </div>
                    <ValidationMessage class="text-danger" TValue="string" For="@(() => Note.Title)" />
                    <div class="mb-3">
                        <label for="Text" class="form-label">Note description</label>
                        <InputTextArea class="form-control" id="Text" rows="10" @bind-Value="Note.Text" maxlength="8192"></InputTextArea>
                        <ValidationMessage class="text-danger" TValue="string" For="@(() => Note.Text)" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn  purple-btn d-inline-flex">Add note</button>
                    <button type="button" class="btn btn-secondary " data-bs-dismiss="modal">Close</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>
@code 
{
    // When note added successfully, just get that note to 
    [Parameter] public EventCallback<Note> OnNotesUpdateWithAddedNote { get; set; }
    Note Note = new();
    private bool isLoading = false;

    private async void HandleSubmit()
    {
        isLoading = true;
        var result = await noteRepository.SaveNoteAsync(Note);

        SweetAlertOptions options = new();
        options.Text = result.Item2;

        if (result.Item1)
        {
            options.Title = "Added";
            options.Icon = SweetAlertIcon.Success;
        }
        else
        {
            options.Title = "Oops..";
            options.Icon = SweetAlertIcon.Error;
        }
        // Send the parent node to update the list with the added note.
        // The user-friendly interface eliminates the need to update the list to see the added note.
        await InvokeAsync(async () =>
        {
            await OnNotesUpdateWithAddedNote.InvokeAsync(Note);
        });

        Note = new Note();
        isLoading = false;

        await InvokeAsync(StateHasChanged);
        await Swal.FireAsync(options);
    }
}
